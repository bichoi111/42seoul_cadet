## 목차
- [1. 학습 날짜](#1-학습-날짜)  
- [2. 학습 시간](#2-학습-시간)  
- [3. 학습 범위 및 주제](#3-학습-범위-및-주제)  
- [4. 동료 학습 방법](#4-동료-학습-방법)  
- [5. 학습 목표](#5-학습-목표)  
- [6. 상세 학습 내용](#6-상세-학습-내용)  
    - [표준 라이브러리](#--표준-라이브러리)
        - [표준 라이브러리란?](#1-표준-라이브러리란)
        - [구성물](#2-구성물) 
        - [표준 라이브러리 예](#3-표준-라이브러리-예)  
    - [헤더파일](#--헤더파일)
        - [헤더파일이란?](#1-헤더파일이란)  
        - [헤더파일 사용 예](#2-헤더파일-사용-예) 
        - [적절하지 못한 헤더파일 사용 예](#3-적절하지-못한-헤더파일-사용-예)
    - [stdio.h](#--stdio-h)
        - [stdio.h에 정의된 함수들](#stdio-h에-정의된-함수들-일부)
    - [실제 학습 시간 및 참고 사이트](#--기타-세부-사항)
- [7. 학습 내용에 대한 개인적인 총평](#7-학습-내용에-대한-개인적인-총평)
- [8. 다음 학습 계획](#8-다음-학습-계획)  
<br/> 

## 1. 학습 날짜
* 2021-01-18(월)<br/><br/>
## 2. 학습 시간
* 19:30 ~ 22:00(자가)<br/><br/>
## 3. 학습 범위 및 주제
* 라이브러리와 헤더파일이란 각각 무엇인가?
* 라이브러리와 헤더파일의 차이점을 비교한다.<br/><br/>
## 4. 동료 학습 방법
* 해당 사항 없음<br/><br/>
## 5. 학습 목표
* 라이브러리와 헤더파일의 차이점을 구분할 줄 안다.<br/><br/>
## 6. 상세 학습 내용
## - 표준 라이브러리 
### 1) 표준 라이브러리란?
프로그래밍 언어의 여러 구현체에서 통용될 수 있도록 만들어진 라이브러리를 말한다.  
<br/>

### 2) 구성물
표준 라이브러리는 일반적으로 **공통으로 사용되는 알고리즘, 데이터 구조, 입출력을 위한 매커니즘을 위한 정의들을 포함하고 있다.**  
호스트 언어에서 사용 가능한 구성체에 따라 표준 라이브러리는 다음을 포함할 수 있다.  
```
- 함수
- 매크로 정의
- 전역 변수
- 클래스 정의
- 템플릿 
```
대부분의 표준 라이브러리는 적어도 공통으로 쓰이는 다음의 기능들을 위한 정의들을 포함한다.  
```
- 알고리즘 (예 : 정렬 알고리즘)
- 자료구조 (예 : 리스트, 트리, 해시 테이블)
- 호스트 플랫폼과의 상호 작용 (입출력, 운영 체제 호출 포함)
```
<br/>

### 3) 표준 라이브러리 예
- [C 표준 라이브러리](https://ko.wikipedia.org/wiki/C_%ED%91%9C%EC%A4%80_%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC)  
- [C++ 표준 라이브러리](https://ko.wikipedia.org/wiki/C%2B%2B_%ED%91%9C%EC%A4%80_%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC)  
<br/>

---
<br/>

## - 헤더파일
### 1) 헤더파일이란?
컴퓨터 프로그래밍에서, 특히 C와 C++ 프로그래밍 언어에서, 헤더 파일(header file) 또는 인클루드 파일(include file)은  
**컴파일러에 의해 다른 소스 파일에 자동으로 포함된 소스 코드의 파일이다.** 일반적으로 헤더 파일들은 다른 소스 파일 속의 첫 부분에 포함된다.  
<br/>
C와 C++ 프로그래밍 언어에서, **표준 라이브러리 함수는 전통적으로 헤더 파일 안에서 선언되어 있다.**  
C 표준 라이브러리와 C++ 표준 라이브러리에 많은 함수들이 존재한다. 함수들은 사용자가 API 수준에서 알아야 한다.  
따라서 개발 도구를 만드는 입장에서, 함수 자체를 설계하고 코딩을 한 측에서 제공해야 한다.  
<br/>
라이브러리 오브젝트 코드는 파일로 존재하고 헤더 파일에 함수나 변수의 형이 선언되어 있으므로 사용자 측에서 붙여 사용하면 된다.  
사용자 측에서 사용한 라이브러리는 라이브러리 파일의 코드를 링커가 응용 프로그램에 붙여 전체 실행 코드가 완성된다.  
결국 헤더 파일의 형을 사용하여 라이브러리 사용자의 인클루드에 의해 함수 호출이 방식이 결정된다.  
<br/>

### 2) 헤더파일 사용 예
대표적으로 C언어에서 많이 사용하는 `printf` 함수는 `stdio.h` 표준 라이브러리에 존재한다.  
```c
#include <stdio.h>

int main(int argc, char *argv[])
{
    printf("출력 함수 사용 예\n");
    
    return 0;
}
```
<br/>

여기서 실시간 라이브러리 함수 `printf`코드는 라이브러리 파일에 존재하고, `stdio.h` 헤더 파일에 형이 선언되어 있다.  
헤더 파일의 가장 일반적인 형태는 다음과 같은 예에서 볼 수 있다.  
<br/>
- 헤더 파일
```c
// 파일 : MyFunc.h

#ifndef _MYFUNC_H
#define _MYFUNC_H

// 함수의 형을 선언하여 호출 시, 인수의 형태를 알린다.
int add(int a, int b);

#endif
```
- 실시간 함수
```c
// 파일 : MyFunc.c

#include "MyFunc.h"

int add(int a, int b)
{
    int c;
    c = a + b;
    return c;
}
```
- 메인 함수
```c
// 파일 : main.c

#include <stdio.h>
#include "MyFunc.h"

int main(int argc, char *argv[])
{
    int c = add(10, 20);
    printf("10 + 20 = %d\n", c);
    return 0;
}
```
<br/>

> 헤더파일에서 사용하는 코드는 **형을 알리는 형태**가 가장 일반적이다.  
> **프로세서가 실행될 때 변수 공간을 잡는 형태는 중복에 의해 문제가 될 수도 있다. main에서 또 할당을 할 수도 있으니까(?)**
> [변수 중복 정의 참고 사이트](https://blog.naver.com/phh0606c/10174041285)  
> 헤더파일의 사용은 여러 파일에서 중복으로 인클루드로 붙여서 사용하는 것이 일반적이기 때문이다.  
> 그래서 아래 다섯가지 정도만 헤더파일에 쓰는게 좋다. 프로그래머들 사이에서 암묵적인 규칙!  

- 형을 알리는 C/C++ 코드 :
    - #define
    - enum
    - struct 헤더 부
    - 클래스 선언 부
    - 함수 형  

등이 대표적이다. 따라서 이것들은 헤더 파일에 넣는 것이 일반적이다.  
헤더 파일에 변수의 선언은 C/C++ 언어 입장에서는 문제가 없지만 프로그래밍 코드가 복잡해지면 혼돈의 염려가 있으므로,  
습관된 헤더 파일 사용 방법 숙지가 필요하다.  
<br/>

### 3) 적절하지 못한 헤더파일 사용 예
- 헤더파일
```c
// 파일 : MyFunc.h

#ifndef _MYFUNC_H
#define _MYFUNC_H

char gbuff[256]; // 헤더파일 안에서 변수 공간을 잡는 형태

char *addString(char *pa, char *pb);

#endif
```
- 실시간 함수
```c
// 파일 : MyFunc.c

#include <string.h>
#include "MyFunc.h"

char *addString(char *pa, char *pb)
{
    strcpy(gbuff, pa);
    strcat(gbuff, pb);
    return gbuff;
}
```
- 메인 함수
```c
// 파일 : main.c

#include <stdio.h>
#include "MyFunc.h"

int main(int argc, char *argv[])
{
    char *pstr = addString("첫문자", "다음");
    printf("%s\n", pstr);
    return 0;
}
```
<br/>

---
<br/>

## - `stdio.h`
- <https://modoocode.com/34>
- `stdio.h`는 `Standard Input/Output library` (표준 입출력 라이브러리)의 약어  
- C언어의 표준 라이브러리 함수의 매크로 정의, 상수, 여러 형의 입출력 함수가 포함된 헤더파일이다.  
- 라이브러리 함수(및 변종들)는 헤더 파일에 정의되어있다.  
- 그러므로 프로그래머는 헤더 파일에 정의된 함수를 사용하기 위해 반드시 `stdio.h` 헤더 파일을 소스 코드에 포함해야 한다.  
<br/>

### stdio.h에 정의된 함수들 (일부)
**1) 파일 작업 관련**
- `remove` : 파일을 삭제한다.
- `rename` : 파일 이름을 변경한다.
- `tempfile` : 임시 파일을 연다.
- `tempnam` : 임시 파일의 이름을 생성한다.

<br/>

**2) 파일 접근 관련**
- `fclose` : 파일을 닫는다.
- `fflush` : 스트림을 비운다 (flush)
- `fopen` : 파일을 연다.
- `freopen` : 다른 파일이나 모드로 스트림을 다시 연다.
- `setbuf` : 스트림 버퍼를 설정한다.
- `setvbuf` : 스트림의 버퍼 및 모드(fully buffered, line buffered, unbuffered)까지 설정한다.

<br/>

**3) 형식 있는(formatted) 입출력**
- `fprintf` : 형식 있는 데이터를 스트림에 쓴다.  
- `fscanf` : 형식 있는 데이터를 스트림에서 읽는다.
- `printf` : `stdout`에 형식 있는 데이터를 출력한다. 
- `scanf` : 형식 있는 데이터는 `stdin` 에서 읽는다.
- `sprintf` : 문자열에 형식 있는 데이터를 쓴다.
- `sscanf` : 문자열에서 형식 있는 데이터를 읽는다.
- `vfprintf` : 스트림에 형식 있는 가변 인자 목록(variable argument list)을 쓴다.
- `vprintf` : `stdout`에 가변 인자 목록을 출력한다.
- `vsprintf` : 문자열에 가변 인자 목록을 출력한다.  

<br/>

**4) 문자(character) 입출력**
- `fgetc` : 스트림에서 문자를 받는다.
- `fgets` : 스트림에서 문자열을 받는다.
- `fputc` : 스트림에 문자를 쓴다.
- `fputs` : 스트림에 문자열을 쓴다.
- `getc` : 스트림에서 문자를 받는다.
- `getchar` : `stdin`에서 문자를 받는다.
- `gets` : `stdin`에서 문자열을 받는다.
- `putc` : 스트림에 문자를 쓴다.
- `putchar` : 문자를 `stdout`에 쓴다.
- `puts` : 문자열을 `stdout`에 쓴다.
- `ungetc` : 스트림으로부터 문자를 되돌린다.  

<br/>

**5) 직접적인 입출력**
- `fread` : 스트림으로부터 데이터 블록을 읽는다.
- `fwrite` : 스트림에 데이터 블록을 쓴다.

<br/>

**6) 파일 위치 지정**
- `fgetpos` : 현재 스트림의 (읽어들이는) 위치를 얻는다.
- `fseek` : 스트림 위치 표시자의 위치를 재조정한다.
- `fsetpos` : 스트림의 위치 표시자를 설정한다.
- `ftell` : 스트림의 현재 위치를 얻는다.
- `rewind` : 위치 표시자의 위치를 맨 앞으로 조정한다.  

<br/>

---
<br/>

## - 정리
> 헤더 파일이란 컴파일러에 의해 다른 소스 파일에 자동으로 포함된 소스 코드의 파일로, 표준 라이브러리 함수가 헤더 파일 안에 선언되어있다.  
> 즉, 표준 라이브러리 함수 `printf(), scanf()` 등의 동작을 따로 정의해 놓은 파일을 의미한다. 헤더파일의 확장자는  `*.h`이다.  
> `#include <stdio.h>`에서 헤더 파일은 `stdio.h`이다. (stdio는 Standard Input Output의 줄임말)  
> 이 말을 정리하면, `stdio.h`라는 헤더파일에는 `printf(), scanf()`와 같은 함수를 정의해 놓은 라이브러리 모읍집 이라고 생각하면 된다.

<br/>

---
<br/>

## - 기타 세부 사항
* 실제 학습 시간 : 2시간 30분
* 학습에 참고한 사이트 :
    * [표준 라이브러리](https://ko.wikipedia.org/wiki/%ED%91%9C%EC%A4%80_%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC)
    * [헤더 파일](https://ko.wikipedia.org/wiki/%ED%97%A4%EB%8D%94_%ED%8C%8C%EC%9D%BC)
    * [stdio.h](https://ko.wikipedia.org/wiki/Stdio.h)
<br/>

---
<br/>

## 7. 학습 내용에 대한 개인적인 총평
헤더파일이 `#include ~`라는 것, 라이브러리는 유용한 함수들의 모음으로만 알고 있었다. 그렇다면 `#include <stdio.h>`에서 `stdio.h`는 표준 라이브러리라고 해야 되는건지 헤더파일이라고 해야 하는건지 헷갈려서 이 두가지의 개념을 정리해보았다. 확장자 `.h`가 헤더파일의 확장자가 아닌가? 근데 왜 `stdio.h`를 표준 라이브러리라고 설명한 글들이 많이 보이는 것인가? **stdio.h라는 헤더파일안에 printf 같은 표준 라이브러리 함수가 정의되어 있다. 헤더파일안에는 함수 이름, 인자 형을 적어주고(선언), 그 함수의 초기화(함수의 기능 구현, 정의)는 라이브러리 파일 안에 작성되어 있는 것!!** 이해하기가 어렵지만 앞으로 라이브러리를 만들어 보면서 자연스레 이해될거라 생각한다.  

<br/>

## 8. 다음 학습 계획
- static변수의 예제를 살펴본다.  
- 외부 변수, 함수를 참조하는 `extern`키워드에 대해 알아본다.  
- 헤더파일을 포함하는 방식을 정리한다.  
